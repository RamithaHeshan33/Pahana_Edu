name: Frontend CI

on:
  push:
    branches: [ main, dev ]
    paths:
      - "Pahana_Edu/src/main/webapp/**"
      - ".github/workflows/frontend.yml"
  pull_request:
    branches: [ main, dev ]
    paths:
      - "Pahana_Edu/src/main/webapp/**"
      - ".github/workflows/frontend.yml"

jobs:
  validate-frontend:
    runs-on: ubuntu-latest
    name: Validate Frontend Assets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install HTML/CSS/JS validators
        run: |
          npm install -g html-validate
          npm install -g stylelint stylelint-config-standard
          npm install -g eslint

      - name: Create validation configs
        run: |
          # HTML Validate config
          cat > .htmlvalidate.json << 'EOF'
          {
            "extends": ["html-validate:recommended"],
            "rules": {
              "void-style": "off",
              "no-trailing-whitespace": "off"
            }
          }
          EOF

          # Stylelint config
          cat > .stylelintrc.json << 'EOF'
          {
            "extends": ["stylelint-config-standard"],
            "rules": {
              "at-rule-no-unknown": [true, {
                "ignoreAtRules": ["tailwind", "apply", "variants", "responsive", "screen"]
              }]
            }
          }
          EOF

          # ESLint config
          cat > .eslintrc.json << 'EOF'
          {
            "env": {
              "browser": true,
              "es2021": true
            },
            "extends": "eslint:recommended",
            "parserOptions": {
              "ecmaVersion": 12,
              "sourceType": "script"
            },
            "rules": {
              "no-unused-vars": "warn",
              "no-console": "off"
            }
          }
          EOF

      - name: Validate HTML in JSP files
        run: |
          echo "Checking JSP files for HTML structure..."
          find Pahana_Edu/src/main/webapp -name "*.jsp" -type f | while read file; do
            echo "Checking $file"
            # Extract HTML content from JSP (basic extraction)
            grep -v "<%\|%>" "$file" > temp_html.html || true
            if [ -s temp_html.html ]; then
              html-validate temp_html.html || echo "HTML validation issues in $file"
            fi
            rm -f temp_html.html
          done

      - name: Check for inline CSS
        run: |
          echo "Checking for inline CSS that should be in external files..."
          find Pahana_Edu/src/main/webapp -name "*.jsp" -type f -exec grep -l "style=" {} \; | while read file; do
            echo "Warning: Inline styles found in $file"
          done

      - name: Validate JavaScript in JSP files
        run: |
          echo "Extracting and validating JavaScript from JSP files..."
          find Pahana_Edu/src/main/webapp -name "*.jsp" -type f | while read file; do
            echo "Checking JavaScript in $file"
            # Extract JavaScript content between <script> tags
            sed -n '/<script>/,/<\/script>/p' "$file" | sed '/<script>/d; /<\/script>/d' > temp_js.js || true
            if [ -s temp_js.js ]; then
              eslint temp_js.js || echo "JavaScript issues in $file"
            fi
            rm -f temp_js.js
          done

      - name: Check accessibility
        run: |
          echo "Basic accessibility checks..."
          find Pahana_Edu/src/main/webapp -name "*.jsp" -type f | while read file; do
            echo "Checking $file for accessibility issues"
            
            # Check for images without alt text
            if grep -q '<img[^>]*>' "$file" && ! grep -q 'alt=' "$file"; then
              echo "Warning: Images without alt text in $file"
            fi
            
            # Check for form inputs without labels
            if grep -q '<input[^>]*>' "$file"; then
              if ! grep -q '<label' "$file" && ! grep -q 'aria-label' "$file"; then
                echo "Warning: Form inputs without labels in $file"
              fi
            fi
          done

      - name: Check for security issues
        run: |
          echo "Checking for potential security issues..."
          find Pahana_Edu/src/main/webapp -name "*.jsp" -type f | while read file; do
            echo "Checking $file for security issues"
            
            # Check for potential XSS vulnerabilities
            if grep -q '<%=' "$file" && ! grep -q 'escapeXml\|fn:escapeXml' "$file"; then
              echo "Warning: Potential XSS vulnerability in $file - consider using JSTL escaping"
            fi
            
            # Check for hardcoded sensitive data
            if grep -qi 'password\|secret\|key.*=' "$file"; then
              echo "Warning: Potential hardcoded sensitive data in $file"
            fi
          done

      - name: Generate frontend report
        run: |
          echo "# Frontend Validation Report" > frontend-report.md
          echo "Generated on: $(date)" >> frontend-report.md
          echo "" >> frontend-report.md
          echo "## Files Checked" >> frontend-report.md
          find Pahana_Edu/src/main/webapp -name "*.jsp" -type f | wc -l | xargs echo "JSP files:" >> frontend-report.md
          find Pahana_Edu/src/main/webapp -name "*.css" -type f | wc -l | xargs echo "CSS files:" >> frontend-report.md
          find Pahana_Edu/src/main/webapp -name "*.js" -type f | wc -l | xargs echo "JS files:" >> frontend-report.md

      - name: Upload frontend report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-validation-report
          path: frontend-report.md
          retention-days: 30

  performance-check:
    runs-on: ubuntu-latest
    name: Frontend Performance Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check file sizes
        run: |
          echo "Checking frontend asset sizes..."
          find Pahana_Edu/src/main/webapp -type f \( -name "*.css" -o -name "*.js" -o -name "*.jpg" -o -name "*.png" -o -name "*.gif" \) -exec ls -lh {} \; | while read line; do
            size=$(echo $line | awk '{print $5}')
            file=$(echo $line | awk '{print $9}')
            echo "$file: $size"
            
            # Check for large files (>1MB)
            if [[ $size == *M* ]] && [[ ${size%M*} -gt 1 ]]; then
              echo "Warning: Large file detected: $file ($size)"
            fi
          done

      - name: Check for CDN usage
        run: |
          echo "Checking for external CDN dependencies..."
          find Pahana_Edu/src/main/webapp -name "*.jsp" -type f -exec grep -l "cdn\." {} \; | while read file; do
            echo "CDN usage found in: $file"
            grep "cdn\." "$file" | sed 's/^/  /'
          done